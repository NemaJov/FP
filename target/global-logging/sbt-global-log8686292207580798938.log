[debug] > Exec(early(addDefaultCommands), None, None)
[debug] > Exec(addDefaultCommands, None, None)
[debug] > Exec(early(initialize), None, None)
[debug] > Exec(initialize, None, None)
[debug] > Exec(early(addPluginSbtFile="""C:\Users\nemanjaj\AppData\Local\Temp\idea.sbt"""), None, None)
[debug] > Exec(addPluginSbtFile="""C:\Users\nemanjaj\AppData\Local\Temp\idea.sbt""", None, None)
[debug] > Exec(boot, None, None)
[debug] > Exec(writeSbtVersion, None, None)
[debug] > Exec(reload, None, None)
[debug] > Exec(sbtStashOnFailure, None, None)
[debug] > Exec(onFailure loadFailed, None, None)
[debug] > Exec(loadp, None, None)
[info] welcome to sbt 1.5.5 (AdoptOpenJDK Java 1.8.0_292)
[debug]       Load.loadUnit: plugins took 67.0831ms
[debug]       Load.loadUnit: defsScala took 0.2416ms
[debug] [Loading] Scanning directory C:\Users\nemanjaj\.sbt\1.0\plugins
[debug]         Load.loadUnit: mkEval took 6.102ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nemanjaj\.sbt\1.0\plugins, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 14.412 ms
[info] loading settings for project global-plugins from plugins.sbt ...
[debug]           Load.resolveProject(global-plugins) took 46.2691ms
[debug]         Load.loadTransitive: finalizeProject(Project(id global-plugins, base: C:\Users\nemanjaj\.sbt\1.0\plugins, plugins: List(<none>))) took 81.1911ms
[debug] [Loading] Done in C:\Users\nemanjaj\.sbt\1.0\plugins, returning: (global-plugins)
[debug]       Load.loadUnit: loadedProjectsRaw took 273.1389ms
[debug]       Load.loadUnit: cleanEvalClasses took 5.8224ms
[debug]     Load.loadUnit(file:/C:/Users/nemanjaj/.sbt/1.0/plugins/, ...) took 351.8856ms
[debug]   Load.apply: load took 467.9665ms
[debug]   Load.apply: resolveProjects took 4.0147ms
[debug]   Load.apply: finalTransforms took 39.1459ms
[debug]   Load.apply: config.delegates took 6.2786ms
[debug]   Load.apply: Def.make(settings)... took 253.6662ms
[debug]   Load.apply: structureIndex took 71.9693ms
[debug]   Load.apply: mkStreams took 1.2143ms
[info] loading global plugins from C:\Users\nemanjaj\.sbt\1.0\plugins
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[debug] Load.defaultLoad until apply took 2243.0266ms
[debug]           Load.loadUnit: plugins took 26.7098ms
[debug]           Load.loadUnit: defsScala took 0.0028ms
[debug] [Loading] Scanning directory C:\Users\nemanjaj\workspace\Funkcionalno\project
[debug]             Load.loadUnit: mkEval took 1.0378ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nemanjaj\workspace\Funkcionalno\project, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(com.typesafe.sbteclipse.plugin.EclipsePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(com.typesafe.sbteclipse.plugin.EclipsePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,com.typesafe.sbteclipse.plugin.EclipsePlugin,sbt.plugins.MiniDependencyTreePlugin,sbt.plugins.JUnitXmlReportPlugin,sbt.plugins.SemanticdbPlugin)
[debug] Plugins.deducer#function took 1.4437 ms
[info] loading settings for project funkcionalno-build from idea.sbt ...
[debug]               Load.resolveProject(funkcionalno-build) took 4.2687ms
[debug]             Load.loadTransitive: finalizeProject(Project(id funkcionalno-build, base: C:\Users\nemanjaj\workspace\Funkcionalno\project, plugins: List(<none>))) took 6.1659ms
[debug] [Loading] Done in C:\Users\nemanjaj\workspace\Funkcionalno\project, returning: (funkcionalno-build)
[debug]           Load.loadUnit: loadedProjectsRaw took 1567.6614ms
[debug]           Load.loadUnit: cleanEvalClasses took 1.3199ms
[debug]         Load.loadUnit(file:/C:/Users/nemanjaj/workspace/Funkcionalno/project/, ...) took 1596.3884ms
[debug]       Load.apply: load took 1597.7665ms
[debug]       Load.apply: resolveProjects took 0.1033ms
[debug]       Load.apply: finalTransforms took 10.4549ms
[debug]       Load.apply: config.delegates took 0.4504ms
[debug]       Load.apply: Def.make(settings)... took 68.4153ms
[debug]       Load.apply: structureIndex took 17.6955ms
[debug]       Load.apply: mkStreams took 0.0026ms
[info] loading project definition from C:\Users\nemanjaj\workspace\Funkcionalno\project
[debug] Running task... Cancel: Signal, check cycles: false, forcegc: true
[warn] Unrecognized repository Scala Plugin Bundled Repository, ignoring it
[debug]     Load.loadUnit: plugins took 3474.031ms
[debug]     Load.loadUnit: defsScala took 0.0023ms
[debug] [Loading] Scanning directory C:\Users\nemanjaj\workspace\Funkcionalno
[debug]       Load.loadUnit: mkEval took 0.2239ms
[debug] [Loading] Found non-root projects 
[debug] [Loading] Done in C:\Users\nemanjaj\workspace\Funkcionalno, returning: ()
[debug] deducing auto plugins based on known facts Set(Atom(sbt.plugins.CorePlugin)) and clauses Clauses(Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.ScriptedPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.SbtPlugin),Set(Atom(sbt.ScriptedPlugin)))
[debug] Clause(Atom(sbt.plugins.SemanticdbPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JUnitXmlReportPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.MiniDependencyTreePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.StructurePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.IdeaShellPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(com.typesafe.sbteclipse.plugin.EclipsePlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.IvyPlugin)))
[debug] Clause(Atom(sbt.plugins.IvyPlugin),Set(Atom(sbt.plugins.JvmPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.SemanticdbPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.JUnitXmlReportPlugin)))
[debug] Clause(Atom(sbt.plugins.CorePlugin),Set(Atom(sbt.plugins.Giter8TemplatePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(sbt.plugins.MiniDependencyTreePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.StructurePlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(org.jetbrains.sbt.IdeaShellPlugin)))
[debug] Clause(And(Set(Atom(sbt.plugins.CorePlugin), Atom(sbt.plugins.JvmPlugin))),Set(Atom(org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin)))
[debug] Clause(Atom(sbt.plugins.JvmPlugin),Set(Atom(com.typesafe.sbteclipse.plugin.EclipsePlugin))))
[debug]   :: deduced result: Matched(sbt.plugins.CorePlugin,sbt.plugins.Giter8TemplatePlugin,sbt.plugins.IvyPlugin,sbt.plugins.JvmPlugin,com.typesafe.sbteclipse.plugin.EclipsePlugin,sbt.plugins.SemanticdbPlugin,org.jetbrains.sbt.indices.SbtIntellijIndicesPlugin,sbt.plugins.JUnitXmlReportPlugin,org.jetbrains.sbt.IdeaShellPlugin,org.jetbrains.sbt.StructurePlugin,sbt.plugins.MiniDependencyTreePlugin)
[debug] Plugins.deducer#function took 1.4165 ms
[info] loading settings for project funkcionalno from build.sbt ...
[debug]         Load.resolveProject(funkcionalno) took 22.4886ms
[debug]       Load.loadTransitive: finalizeProject(Project(id funkcionalno, base: C:\Users\nemanjaj\workspace\Funkcionalno, plugins: List(<none>))) took 24.8519ms
[debug] [Loading] Done in C:\Users\nemanjaj\workspace\Funkcionalno, returning: (funkcionalno)
[debug]     Load.loadUnit: loadedProjectsRaw took 771.4921ms
[debug]     Load.loadUnit: cleanEvalClasses took 5.4594ms
[debug]   Load.loadUnit(file:/C:/Users/nemanjaj/workspace/Funkcionalno/, ...) took 4251.4602ms
[debug] Load.apply: load took 4252.4963ms
[debug] Load.apply: resolveProjects took 0.0898ms
[debug] Load.apply: finalTransforms took 17.6901ms
[debug] Load.apply: config.delegates took 0.2229ms
[debug] Load.apply: Def.make(settings)... took 53.6602ms
[debug] Load.apply: structureIndex took 14.7307ms
[debug] Load.apply: mkStreams took 0.0021ms
[info] set current project to Funkcionalno (in build file:/C:/Users/nemanjaj/workspace/Funkcionalno/)
[debug] > Exec(sbtPopOnFailure, None, None)
[debug] > Exec(resumeFromFailure, None, None)
[debug] > Exec(notifyUsersAboutShell, None, None)
[debug] > Exec(iflast shell, None, None)
[debug] > Exec(; set ideaPort in Global := 51601 ; idea-shell, None, None)
[debug] > Exec(set ideaPort in Global := 51601, None, None)
[info] Defining Global / ideaPort
[info] The new value will be used by Compile / compile, Test / compile
[debug] Defining 
[debug] 	Global / ideaPort
[debug] 
[debug] The new value will be used by 
[debug] 	Compile / compile
[debug] 	Test / compile
[info] Reapplying settings...
[info] set current project to Funkcionalno (in build file:/C:/Users/nemanjaj/workspace/Funkcionalno/)
[debug] > Exec(idea-shell, None, None)
